<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>人渣29的小窝</title><link>https://harrywang29.github.io/</link><description>Recent content on 人渣29的小窝</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 28 Aug 2022 23:17:00 +0800</lastBuildDate><atom:link href="https://harrywang29.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Log Alias</title><link>https://harrywang29.github.io/tech/git-log-alias/</link><pubDate>Sun, 28 Aug 2022 23:17:00 +0800</pubDate><guid>https://harrywang29.github.io/tech/git-log-alias/</guid><description>设置 Link to heading git config --global alias.lg &amp;#34;log --color --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit&amp;#34; 效果 Link to heading base on gorm</description></item><item><title>Git工作流</title><link>https://harrywang29.github.io/tech/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Fri, 13 May 2022 22:15:31 +0800</pubDate><guid>https://harrywang29.github.io/tech/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>git工作流其实含有很多种，git/github/gitlab等等，但是大多数文章中只是描述了主要流程中的特性，并没有描述多人并行开发时注意点，本文主要说明多人并行开发时，git如何使用
书籍推荐 Link to heading 首先推荐一本书——git官方文档，中文翻译+pdf下载，非常方便。
个人认为，作为普通使用者来讲，此书只需要看1/2/3/7就可以了，其他的可以作为扩展内容进行阅读，本文后续内容会有部分摘抄自此文档。
前置知识 Link to heading 开源社区基础开发git流：
从 开源仓库中fork到 个人仓库 clone仓库到本地（其实这里无论是从原来仓库clone，还是从自己的仓库clone都可以，主要涉及本地remote如何设置） 在本地修改代码，实现需求 commit修改 push代码到 个人仓库 从 个人仓库 发起pr到 开源仓库 由 开源仓库 管理员审核后，merge 到 开源仓库 中 若开源仓库后续发布新的版本，则从 开源仓库 pull到本地 引申到公司代码开发：
最近在使用了企业版gitee后，发现评审模式下，员工对保护分支进行push时，会自动生成一个auto-xxx的pr分支（例如git push origin new-work =&amp;gt; git push origin auto-new-work; 再从auto-new-work提交一个pr到new-work分支），观察下来发先，确实可以省去fork这一流程
分支 Link to heading 相信大家对于创建分支命令已经非常熟悉了：
git branch test git checkout test 或者 git checkout -b test 在此推荐几个命令：
git branch --merged #查看所有已经合并到当前分支的分支 git branch --no-merged #查看所有包含未合并工作的分支 #详细解释可以执行如下命令查看 git branch --help git stash # 将当前分支的改动储藏起来 # 当你有一些代码改动，又不想commit时，可使用此命令将变动暂存起来 git stash pop # 将最后一起储藏起来的变动释放出来 #详细解释可以执行如下命令查看 git stash --help 此处我们还是查看文章 3.</description></item></channel></rss>